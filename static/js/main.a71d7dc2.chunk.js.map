{"version":3,"sources":["assets/arrow-left.svg","assets/logo.svg","config/colors.js","components/Menu/index.js","components/IndexItem/index.js","pages/Index/index.js","pages/NotFound/index.js","components/PokeCard/index.js","components/PokeList/index.js","pages/Pokedex/index.js","routes.js","serviceWorker.js","index.js","App.js","assets/pokeball.jpg"],"names":["module","exports","Menu","props","id","href","src","ArrowLeft","alt","IndexItem","to","className","style","backgroundColor","color","title","pokedexIcon","Index","App","logo","PokeCard","useState","index","toString","split","length","pokeNum","setPokeNum","type","name","types","setTypes","a","axios","get","info","data","reverse","useEffect","num","i","getPokemonInfo","colors","map","key","PokeList","pokemons","setPokemons","nextPage","setNextPage","getPokeInfo","next","results","pokemon","url","onClick","Pokedex","Routes","path","exact","component","NotFound","Boolean","window","location","hostname","match","ReactDOM","render","pokeballIcon","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a71d7dc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow-left.713fe29d.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = {\n  \"grass\": \"#9bcc50\",\n  \"poison\": \"#b97fc9\",\n  \"fire\": \"#fd7d24\",\n  \"flying\": \"#3dc7ef\",\n  \"water\": \"#4592c4\",\n  \"bug\": \"#729f3f\",\n  \"normal\": \"#a4acaf\",\n  \"electric\": \"#eed535\",\n  \"ground\": \"#f7de3f\",\n  \"fairy\": \"#fdb9e9\",\n  \"fighting\": \"#d56723\",\n  \"psychic\": \"#f366b9\",\n  \"steel\": \"#9eb7b8\",\n  \"ice\": \"#51c4e7\",\n  \"ghost\": \"#7b62a3\",\n  \"rock\": \"#a38c21\",\n  \"dragon\": \"#53a4cf\",\n  \"dark\": \"#707070\",\n}","import React from 'react';\n\nimport ArrowLeft from '../../assets/arrow-left.svg';\n\nimport './styles.css';\n\nexport default function Menu(props) {\n  return (\n    <div id=\"mainMenu\">\n      <a href={props.href}>\n        <img src={ArrowLeft} alt=\"Back\"/>\n      </a>\n    </div>\n  );\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nimport pokedexIcon from '../../assets/pokeball.jpg';\n\nexport default function IndexItem(props) {\n  return(\n    <Link to={props.href} className=\"IndexItem\" style={{backgroundColor: props.color}}>\n      <strong>{props.title}</strong>\n      <img src={pokedexIcon} alt=\"Pokedex Icon\"/>\n    </Link>\n  )\n}","import React from 'react';\nimport './styles.css';\n\n// Components\nimport MainMenu from '../../components/Menu';\nimport IndexItem from '../../components/IndexItem';\n\nexport default function Index() {\n  return (\n    <div id=\"Index\">\n      <MainMenu />\n      <h1 className=\"title\">Pokemon!</h1>\n      <div id=\"items\">\n        <IndexItem href=\"/pokedex\" title=\"Pokedex\" color=\"#4bc1a7\" />\n        <IndexItem href=\"/pokedex\" title=\"Pokedex\" color=\"#4bc1a7\" />\n        <IndexItem href=\"/pokedex\" title=\"Pokedex\" color=\"#4bc1a7\" />\n        <IndexItem href=\"/pokedex\" title=\"Pokedex\" color=\"#4bc1a7\" />\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport logo from '../../assets/logo.svg';\nimport './styles.css';\n\nfunction App() {\n  return (\n    <div id=\"NotFound\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <h1>\n          Error 404: Not Found!\n        </h1>\n        <p>\n          This page doesn't exist!\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"/\"\n        >\n          Go back to home\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport colors from '../../config/colors';\n\nimport './styles.css';\n\nexport default function PokeCard(props) {\n  const [pokeNum, setPokeNum] = useState(props.index.toString().split('').length);\n  const [types, setTypes] = useState([{\n    type: {\n      name: \"\"\n    }\n  }]);\n\n  useEffect(() => {\n    let num = '';\n\n    for (let i = pokeNum; i < 3; i++) {\n      num += '0';\n    }\n\n    num += props.index;\n    setPokeNum(num);\n\n    // Get pokemon info\n    getPokemonInfo();\n  }, []);\n\n  async function getPokemonInfo() {\n    const { data } = await axios.get(props.info);\n\n    setTypes(data.types.reverse());\n  }\n\n  return (\n    <div className=\"pokeCard\" style={{ backgroundColor: colors[types[0].type.name] }}>\n      <strong>{props.name}</strong>\n      <p>#{pokeNum}</p>\n      {types.map(type => <span key={type.type.name} className=\"pokeType\">{type.type.name}</span>)}\n      <img src={`https://assets.pokemon.com/assets/cms2/img/pokedex/full/${pokeNum}.png`} alt=\"Pokemon\"/>\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nimport PokeCard from '../../components/PokeCard';\n\nimport './styles.css';\n\nexport default function PokeList() {\n  const [pokemons, setPokemons] = useState([]);\n  const [nextPage, setNextPage] = useState('https://pokeapi.co/api/v2/pokemon/?limit=20&offset=0');\n\n  // Get info from pokeapi\n  useEffect(() => {\n    getPokeInfo();\n  }, []);\n\n  async function getPokeInfo() {\n    const { data } = await axios.get(nextPage);\n\n    const { next, results } = data;\n\n    setPokemons([...pokemons, ...results]);\n    setNextPage(next);\n  }\n\n  function handleLoadMore() {\n    getPokeInfo();\n  }\n\n  return (\n    <div id=\"pokeList\">\n      {pokemons.map((pokemon, index) => (\n        <PokeCard\n          key={index}\n          index={index + 1}\n          name={pokemon.name}\n          info={pokemon.url}\n        />\n      ))}\n      {nextPage !== null ? (\n        <button onClick={handleLoadMore}>More!</button>\n      ) : (\n        <p>End!</p>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\n\n// Components\nimport MainMenu from '../../components/Menu';\nimport PokeList from '../../components/PokeList';\n\nimport './styles.css';\n\nexport default function Pokedex() {\n  return (\n    <div id=\"Pokedex\">\n      <MainMenu />\n      <h1 className=\"title\">Hello Pokedex!</h1>\n      <PokeList />\n    </div>\n  );\n}\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\n// Pages\nimport Index from './pages/Index';\nimport NotFound from './pages/NotFound';\nimport Pokedex from './pages/Pokedex';\n\n// Export Routes\nexport default function Routes() {\n  return(\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/pokedex\" component={Pokedex} />\n        <Route path=\"*\" component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\n\n// Website Routes\nimport Routes from './routes';\n\nimport pokeballIcon from './assets/pokeball.jpg';\n\n// Component\nexport default function App() {\n  return (\n    <div className=\"container\">\n      <img id=\"pokeballIcon\" src={pokeballIcon} alt=\"Pokeball Icon\"/>\n      <Routes />\n    </div>\n  );\n}","module.exports = __webpack_public_path__ + \"static/media/pokeball.b674ae77.jpg\";"],"sourceRoot":""}